# used to create the object
name: MA_OP3_fix

physics_engine: ${..physics_engine}
isMultiAgent: True
env:
  numEnvs: ${resolve_default:8,${...num_envs}}
  numAgents: 2
  envSpacing: 1.  # [m]
  episodeLength: 1000
  color: [[ 1.0, 0.2, 0.2 ], #Red
          [ 0.23, 0.50, 0.92 ], #Blue
          [ 0.97, 0.38, 0.06 ],
          [ 0.24, 0.38, 0.06 ],
          [ 0.56, 0.85, 0.25 ],
          [ 0.14, 0.97, 0.24 ]]
 
  clipObservations: 5.0
  clipActions: 1.0
  staticFriction: 1.0  # [-]
  dynamicFriction: 1.0 # [-]
  restitution: 0.      # [-]
  enableDebugVis: False
  
  baseInitState:
    pos: [0.0, 0.0, 0.27] # x,y,z [m]
    rot: [0.0, 0.0, 0.0, 1.0] # x,y,z,w [quat]
    vLinear: [0.0, 0.0, 0.0]  # x,y,z [m/s]
    vAngular: [0.0, 0.0, 0.0]  # x,y,z [rad/s]
      
  randomCommandVelocityRanges:
    linear_x: [0.0, 0.0] # min max [m/s]
    linear_y: [0.0, 10.0] # min max [m/s]
    yaw: [0.0, 0.0]    # min max [rad/s]
    heading: [-3.14, 3.14]

  control:
    # PD Drive parameters:
    stiffness: 1000.0  # [N*m/rad]
    damping: 200.0     # [N*m*s/rad]
    actionScale: 1.
    powerScale: 0.1
    controlFrequencyInv: 1 # 60 Hz

  defaultJointAngles:  # = target angles when action = 0.0
      head_pan:      0.0   #0
      head_tilt:     0.0   #1
      l_hip_yaw:     0.0   #2
      l_hip_roll:    0.0   #3
      l_hip_pitch:  -0.95  #4
      l_knee:        1.49  #5
      l_ank_pitch:   0.75  #6
      l_ank_roll:    0.0   #7
      l_sho_pitch:   0.0  #8
      l_sho_roll:   -0.514  #9
      l_el:          0.0  #10
      l_gr:          0.0   #11
      r_hip_yaw:     0.0   #12
      r_hip_roll:    0.0   #13
      r_hip_pitch:   0.95  #14
      r_knee:       -1.49  #15
      r_ank_pitch:  -0.75  #16
      r_ank_roll:    0.0   #17
      r_sho_pitch:   0.00  #18
      r_sho_roll:    0.514  #19
      r_el:          0.0  #20
      r_gr:          0.0   #21

  
  urdfAsset:
    collapseFixedJoints: True
    fixBaseLink: False
    defaultDofDriveMode: 4 # see GymDofDriveModeFlags (0 is none, 1 is pos tgt, 2 is vel tgt, 4 effort)

  learn:
    # rewards
    linearVelocityXYRewardScale: 1.0
    angularVelocityZRewardScale: 0.5
    torqueRewardScale: -0.000025
    headingScale: 1
    upScale: 0.1
    actionRateRewardScale: -0.01
    hipRewardScale: -0.
    jointAccRewardScale: -0.0005

    # stability of leg 
    standRewardScale: -0
    noflyRewardScale: 0.5
    feetAirTimeRewardScale: 0.5
    syncronizeHipRewardScale: -0.00025 

    # normalization
    linearVelocityScale: 3.0
    angularVelocityScale: 0.25
    dofPositionScale: 1.0
    dofVelocityScale: 0.01

    # episode length in seconds
    episodeLength_s: 50

    #push robot in seconds
    pushInterval_s: 15

  # viewer cam:
  viewer:
    refEnv: 0
    pos: [0, 0, 1]  # [m]
    lookat: [1., 1, 0.5]  # [m]

  # set to True if you use camera sensors in the environment
  enableCameraSensors: False

sim:
  dt: 0.0166
  substeps: 2
  up_axis: "z"
  use_gpu_pipeline: ${eq:${...pipeline},"gpu"}
  gravity: [0.0, 0.0, -9.81]
  physx:
    num_threads: ${....num_threads}
    solver_type: ${....solver_type}
    use_gpu: ${contains:"cuda",${....sim_device}} # set to False to run on CPU
    num_position_iterations: 4
    num_velocity_iterations: 1
    contact_offset: 0.02
    rest_offset: 0.0
    bounce_threshold_velocity: 0.2
    max_depenetration_velocity: 10.0
    default_buffer_size_multiplier: 5.0
    max_gpu_contact_pairs: 8388608 # 8*1024*1024
    num_subscenes: ${....num_subscenes}
    contact_collection: 1 # 0: CC_NEVER (don't collect contact info), 1: CC_LAST_SUBSTEP (collect only contacts on last substep), 2: CC_ALL_SUBSTEPS (default - all contacts)

task:
  randomize: False
  randomization_params:
    frequency: 600   # Define how many environment steps between generating new randomizations
    observations:
      range: [0, .002] # range for the white noise
      operation: "additive"
      distribution: "gaussian"
    actions:
      range: [0., .02]
      operation: "additive"
      distribution: "gaussian"
    sim_params:
      gravity:
        range: [0, 0.4]
        operation: "additive"
        distribution: "gaussian"
        schedule: "linear"  # "linear" will linearly interpolate between no rand and max rand
        schedule_steps: 3000
    actor_params:
      op3:
        color: True
        rigid_body_properties:
          mass:
            range: [0.5, 1.5]
            operation: "scaling"
            distribution: "uniform"
            setup_only: True # Property will only be randomized once before simulation is started. See Domain Randomization Documentation for more info.
            schedule: "linear"  # "linear" will linearly interpolate between no rand and max rand
            schedule_steps: 3000
        rigid_shape_properties:
          friction:
            num_buckets: 500
            range: [0.7, 1.3]
            operation: "scaling"
            distribution: "uniform"
            schedule: "linear"  # "linear" will scale the current random sample by `min(current num steps, schedule_steps) / schedule_steps`
            schedule_steps: 3000
          restitution:
            range: [0., 0.7]
            operation: "scaling"
            distribution: "uniform"
            schedule: "linear"  # "linear" will scale the current random sample by `min(current num steps, schedule_steps) / schedule_steps`
            schedule_steps: 3000
        dof_properties:
          damping:
            range: [0.5, 1.5]
            operation: "scaling"
            distribution: "uniform"
            schedule: "linear"  # "linear" will scale the current random sample by `min(current num steps, schedule_steps) / schedule_steps`
            schedule_steps: 3000
          stiffness:
            range: [0.5, 1.5]
            operation: "scaling"
            distribution: "uniform"
            schedule: "linear"  # "linear" will scale the current random sample by `min(current num steps, schedule_steps) / schedule_steps`
            schedule_steps: 3000
          lower:
            range: [0, 0.01]
            operation: "additive"
            distribution: "gaussian"
            schedule: "linear"  # "linear" will scale the current random sample by `min(current num steps, schedule_steps) / schedule_steps`
            schedule_steps: 3000
          upper:
            range: [0, 0.01]
            operation: "additive"
            distribution: "gaussian"
            schedule: "linear"  # "linear" will scale the current random sample by `min(current num steps, schedule_steps) / schedule_steps`
            schedule_steps: 3000